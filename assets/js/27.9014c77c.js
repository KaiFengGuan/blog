(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{586:function(s,e,t){"use strict";t.r(e);var o=t(10),_=Object(o.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("在系统开发中， "),t("strong",[s._v("认证/授权")]),s._v(" 与 "),t("strong",[s._v("鉴权/权限控制")]),s._v(" 是比较重要的一环。这次浅谈一下认证授权。")]),s._v(" "),t("p",[t("strong",[s._v("什么是认证（Authentication）")]),s._v("： "),t("u",[s._v("通俗地讲就是验证当前用户的身份")]),s._v(" 。在互联网应用中的认证包括：用户名密码登录、邮箱发送登录链接、手机号接收验证码等，只要你能收到邮箱/验证码，就默认你是账号的主人。")]),s._v(" "),t("p",[t("strong",[s._v("什么是授权（Authorization）")]),s._v("： "),t("u",[s._v("用户授予第三方应用访问该用户某些资源的权限")]),s._v(" 。一般情况下认证/授权同时发生，认证即授权。实现授权的方式有：cookie-session、token、OAuth。")]),s._v(" "),t("p",[t("strong",[s._v("什么是凭证（Credentials）")]),s._v("：实现认证和授权的前提是需要一种媒介（证书）来标记访问者的身份。在互联网应用中，一般网站（如掘金）会有两种模式，游客模式和登录模式。游客模式下，可以正常浏览网站上面的文章，一旦想要点赞/收藏/分享文章，就需要登录或者注册账号。当用户登录成功后，服务器会给该用户使用的浏览器颁发一个令牌（token），这个令牌用来表明你的身份，每次浏览器发送请求时会带上这个令牌，就可以使用游客模式下无法使用的功能。")]),s._v(" "),t("h2",{attrs:{id:"_1-cookie-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-cookie-session"}},[s._v("#")]),s._v(" 1 cookie-session")]),s._v(" "),t("h3",{attrs:{id:"_1-1-什么是cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是cookie"}},[s._v("#")]),s._v(" 1.1 什么是cookie？")]),s._v(" "),t("p",[s._v("原理：客户端首次向服务器发送请求时，服务器会为其分配cookie并存放到响应消息的特定字段中，客户端收到响应消息会解析并存储该字段，在下次再发送请求时就会在请求头部带上这个字段，因此服务器就能区分不同的客户端，以及客户端配置的各种偏好要求。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Cookie")]),s._v(" 最开始被设计出来是为了弥补"),t("code",[s._v("HTTP")]),s._v("在"),t("strong",[s._v("状态管理上的不足")]),s._v("。"),t("code",[s._v("HTTP")]),s._v(" 协议是一个无状态协议，客户端向服务器发请求，服务器返回响应就这样结束了，但是下次发请求如何让服务端知道客户端是谁呢？这种背景下，就产生了 "),t("code",[s._v("Cookie")]),s._v("。")]),s._v(" "),t("li",[t("strong",[s._v("cookie 存储在客户端")]),s._v("： cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。因此，服务端脚本就可以读、写存储在客户端的cookie的值。")]),s._v(" "),t("li",[t("strong",[s._v("cookie 是不可跨域的")]),s._v("： 每个 cookie 都会绑定单一的域名（绑定域名下的子域都是有效的），无法在别的域名下获取使用，同域名不同端口也是允许共享使用的。")])]),s._v(" "),t("p",[s._v("服务端只需要设置 setCookie 这个 header，之后浏览器会自动把 cookie 写入到我们的浏览器存起来，然后当前域名在发送请求的时候都会自动带上这个cookie。")]),s._v(" "),t("p",[s._v("cookie的一些重要属性：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("属性")]),s._v(" "),t("th",[s._v("说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[s._v("name=value")])]),s._v(" "),t("td",[s._v("键值对，设置 Cookie 的名称及相对应的值，都必须是"),t("strong",[s._v("字符串类型")]),s._v("（name 不区分大小写）"),t("br"),s._v("- 如果值为 Unicode 字符，需要为字符编码。"),t("br"),s._v("- 如果值为二进制数据，则需要使用 BASE64 编码。")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("domain")])]),s._v(" "),t("td",[s._v("指定 cookie 所属域名，默认是当前域名")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("path")])]),s._v(" "),t("td",[t("strong",[s._v("指定 cookie 在哪个路径（路由）下生效，默认是 '/'")]),s._v("。"),t("br"),s._v("如果设置为 "),t("code",[s._v("/abc")]),s._v("，则只有 "),t("code",[s._v("/abc")]),s._v(" 下的路由可以访问到该 cookie，如："),t("code",[s._v("/abc/read")]),s._v("。")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("expires")])]),s._v(" "),t("td",[s._v("过期时间（GMT时间格式），在设置的某个时间点后该 cookie 就会失效。"),t("br"),s._v("如果客户端和服务器时间不一致，使用expires就会存在偏差。 "),t("br"),s._v("一般浏览器的 cookie 都是默认储存的，当关闭浏览器结束这个会话的时候，这个 cookie 也就会被删除")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("max-age")])]),s._v(" "),t("td",[s._v("cookie 有效期，单位秒。如果为正数，则该 cookie 在 maxAge 秒后失效。如果为负数，该 cookie 为临时 cookie ，关闭浏览器即失效，浏览器也不会以任何形式保存该 cookie 。如果为 0，表示删除该 cookie 。默认为 -1。"),t("br"),s._v("- 优先级高于 expires")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("HttpOnly")])]),s._v(" "),t("td",[t("strong",[s._v("如果给某个 cookie 设置了 httpOnly 属性，则无法通过 JS 脚本 读写该 cookie 的信息，但还是能通过 Application 中手动修改 cookie，所以只是在一定程度上可以防止 CSRF 攻击，不是绝对的安全")])])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("secure")])]),s._v(" "),t("td",[s._v("该 cookie 是否仅被使用安全协议传输。安全协议有 HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false。 "),t("br"),s._v("当 secure 值为 true 时，cookie 在 HTTP 中是无效的。")])])])]),s._v(" "),t("h3",{attrs:{id:"_1-2-什么是session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-什么是session"}},[s._v("#")]),s._v(" 1.2 什么是session？")]),s._v(" "),t("p",[s._v("原理：用户首次发送请求时，服务器自动为该用户创建特定的session/session ID，来标识用户并跟踪用户当前的会话过程，浏览器收到响应获取会话信息，会在下一次请求时带上session ID，服务器提取后会与本地保存的session ID进行对比找到该特定用户的会话，进而获取会话状态。")]),s._v(" "),t("ul",[t("li",[s._v("会话可以设置过期时间，超过时间限制服务端就销毁session，当然也可以对session进行长期保存，但是会造成数据库极速膨胀")]),s._v(" "),t("li",[t("strong",[s._v("session 是基于 cookie 实现的，session 存储在服务器端，sessionId 会被存储到客户端的cookie 中")])])]),s._v(" "),t("h3",{attrs:{id:"_1-3-两者异同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-两者异同"}},[s._v("#")]),s._v(" 1.3 两者异同")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("安全性：")]),s._v(" Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。")]),s._v(" "),t("li",[t("strong",[s._v("存取值的类型不同")]),s._v("：Cookie 只支持存字符串数据，Session 可以存任意数据类型。")]),s._v(" "),t("li",[t("strong",[s._v("有效期不同：")]),s._v(" Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。")]),s._v(" "),t("li",[t("strong",[s._v("存储大小不同：")]),s._v(" 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。")])]),s._v(" "),t("h3",{attrs:{id:"_1-4-登录认证流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-登录认证流程"}},[s._v("#")]),s._v(" 1.4 登录认证流程")]),s._v(" "),t("ol",[t("li",[s._v("用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建对应的 Session")]),s._v(" "),t("li",[s._v("请求返回时将此 Session 的唯一标识 SessionID 返回给浏览器")]),s._v(" "),t("li",[s._v("浏览器接收到服务器返回的 SessionID 后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名")]),s._v(" "),t("li",[s._v("当用户第二次访问服务器的时候，请求会自动把此域名下的 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。")])]),s._v(" "),t("p",[s._v("根据以上流程可知，"),t("strong",[s._v("SessionID 是连接 Cookie 和 Session 的一道桥梁")]),s._v("，大部分系统也是根据此原理来验证用户登录状态。")]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/KaiFengGuan/imgs/main/202206071507839.jpeg"}}),s._v(" "),t("h2",{attrs:{id:"_2-token-令牌"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-token-令牌"}},[s._v("#")]),s._v(" 2 token（令牌）")]),s._v(" "),t("h3",{attrs:{id:"_2-1-access-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-access-token"}},[s._v("#")]),s._v(" 2.1 Access Token")]),s._v(" "),t("p",[s._v("Access Token是"),t("strong",[s._v("访问资源接口（API）时所需要的资源凭证")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("简单 token 的组成：")]),s._v(" uid（用户唯一的身份标识）、time（当前时间的时间戳）、sign（签名，token 的前几位以哈希算法压缩成的一定长度的十六进制字符串）")]),s._v(" "),t("h4",{attrs:{id:"服务器对token的存储方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务器对token的存储方式"}},[s._v("#")]),s._v(" 服务器对token的存储方式：")]),s._v(" "),t("ol",[t("li",[s._v("存到数据库中，每次客户端请求的时候取出来验证（服务端有状态）")]),s._v(" "),t("li",[s._v("存到 redis 中，设置过期时间，每次客户端请求的时候取出来验证（服务端有状态）")]),s._v(" "),t("li",[s._v("不存，每次客户端请求的时候根据之前的生成方法再生成一次来验证（JWT，服务端无状态）")])]),s._v(" "),t("h4",{attrs:{id:"token的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token的特点"}},[s._v("#")]),s._v(" token的特点：")]),s._v(" "),t("ul",[t("li",[s._v("服务端无状态化、可扩展性好")]),s._v(" "),t("li",[s._v("支持移动端设备")]),s._v(" "),t("li",[s._v("安全")]),s._v(" "),t("li",[s._v("支持跨程序调用")])]),s._v(" "),t("h4",{attrs:{id:"token-的身份验证流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token-的身份验证流程"}},[s._v("#")]),s._v(" "),t("strong",[s._v("token 的身份验证流程：")])]),s._v(" "),t("ol",[t("li",[s._v("客户端使用用户名跟密码请求登录")]),s._v(" "),t("li",[s._v("服务端收到请求，去验证用户名与密码")]),s._v(" "),t("li",[s._v("验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端")]),s._v(" "),t("li",[s._v("客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里")]),s._v(" "),t("li",[s._v("客户端每次向服务端请求资源的时候需要带着服务端签发的 token")]),s._v(" "),t("li",[s._v("服务端收到请求，然后去验证客户端请求里面带着的 token ，如果验证成功，就向客户端返回请求的数据")])]),s._v(" "),t("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://raw.githubusercontent.com/KaiFengGuan/imgs/main/202206071640066.jpeg"}}),s._v(" "),t("p",[s._v("由于"),t("strong",[s._v("每一次请求都需要携带 token，需要把 token 放到 HTTP 的 Header 里")]),s._v("，而且"),t("strong",[s._v("token 完全由应用管理，所以它可以避开同源策略")]),s._v("。")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("注意："),t("strong",[s._v("登录时 token 不宜保存在 localStorage，被 XSS 攻击时容易泄露。所以比较好的方式是")]),s._v("把 token 写在 cookie 里")]),s._v("。为了保证 xss 攻击时 cookie 不被获取，"),t("strong",[s._v("还要设置 cookie 的 http-only")]),s._v("。这样，我们就能确保 js 读取不到 cookie 的信息了。再加上 https，能让我们的请求更安全一些。")])]),s._v(" "),t("h3",{attrs:{id:"_2-2-refresh-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-refresh-token"}},[s._v("#")]),s._v(" 2.2 Refresh Token")]),s._v(" "),t("p",[s._v("refresh token 是专用于刷新 access token 的 token。如果没有 refresh token，也可以刷新 access token，但每次刷新都要用户输入登录用户名与密码，会很麻烦。有了 refresh token，可以减少这个麻烦，客户端直接用 refresh token 去更新 access token，无需用户进行额外的操作。")]),s._v(" "),t("ul",[t("li",[s._v("Access Token 的有效期比较短，当 Acesss Token 由于过期而失效时，使用 Refresh Token 就可以获取到新的 Token，如果 Refresh Token 也失效了，用户就只能重新登录了。")]),s._v(" "),t("li",[s._v("Refresh Token 及过期时间是存储在服务器的数据库中，只有在申请新的 Acesss Token 时才会验证，不会对业务接口响应时间造成影响，也不需要向 Session 一样一直保持在内存中以应对大量的请求。")])]),s._v(" "),t("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://raw.githubusercontent.com/KaiFengGuan/imgs/main/202206071643335.jpeg"}}),s._v(" "),t("h3",{attrs:{id:"_2-3-token与session的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-token与session的区别"}},[s._v("#")]),s._v(" 2.3 Token与Session的区别")]),s._v(" "),t("ul",[t("li",[s._v("Session 是一种记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息。而 Token 是令牌，访问资源接口（API）时所需要的资源凭证。Token 使服务端无状态化，不会存储会话信息。")]),s._v(" "),t("li",[s._v("Session 和 Token 并不矛盾，作为身份认证 Token 安全性比 Session 好，因为每一个请求都有签名还能防止监听以及重复攻击，而 Session 就必须依赖链路层来保障通讯安全了。"),t("strong",[s._v("如果你需要实现有状态的会话，仍然可以增加 Session 来在服务器端保存一些状态。")])]),s._v(" "),t("li",[s._v("如果你的用户数据可能需要和第三方共享，或者允许第三方调用 API 接口，用 Token 。如果永远只是自己的网站，自己的 App，用什么就无所谓了。")])]),s._v(" "),t("h2",{attrs:{id:"_3-jwt-json-web-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-jwt-json-web-token"}},[s._v("#")]),s._v(" 3 JWT（Json Web Token）")]),s._v(" "),t("ul",[t("li",[s._v("JSON Web Token（简称 JWT）是目前最流行的"),t("strong",[s._v("跨域认证")]),s._v("解决方案。")]),s._v(" "),t("li",[s._v("是一种"),t("strong",[s._v("认证授权机制")]),s._v("。")]),s._v(" "),t("li",[s._v("JWT 是为了在网络应用环境间"),t("strong",[s._v("传递声明")]),s._v("而执行的一种基于 JSON 的开放标准。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。")]),s._v(" "),t("li",[s._v("可以使用 HMAC 算法或者是 RSA 的公/私秘钥对 JWT 进行签名。因为数字签名的存在，这些传递的信息是可信的。")])]),s._v(" "),t("h3",{attrs:{id:"_3-1-jwt原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-jwt原理"}},[s._v("#")]),s._v(" 3.1 JWT原理")]),s._v(" "),t("p",[s._v("JWT 的原理是，服务器认证以后，生成一个 JSON 对象，返回给用户，就像下面这样：")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"姓名"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"张三"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"角色"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"管理员"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"到期时间"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2018年7月1日0点0分"')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。")]),s._v(" "),t("p",[s._v("认证流程：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("用户输入用户名/密码登录，服务端认证成功后，会返回给客户端一个 JWT")])]),s._v(" "),t("li",[t("p",[s._v("客户端将 token 保存到本地（通常使用 localstorage，也可以使用 cookie）")])]),s._v(" "),t("li",[t("p",[s._v("当用户希望访问一个受保护的路由或者资源的时候，需要请求头的 Authorization 字段中使用Bearer 模式添加 JWT，其内容看起来是下面这样：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Authorization: Bearer <token>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("服务端的保护路由将会检查请求头 Authorization 中的 JWT 信息，如果合法，则允许用户的行为")])]),s._v(" "),t("li",[t("p",[s._v("因为 JWT 是自包含的（内部包含了一些会话信息），因此减少了需要查询数据库的需要")])]),s._v(" "),t("li",[t("p",[s._v("因为 JWT 并不使用 Cookie 的，所以你可以使用任何域名提供你的 API 服务而不需要担心跨域问题")])]),s._v(" "),t("li",[t("p",[s._v("因为用户的状态不再存储在服务端的内存中，所以这是一种无状态的认证机制")])])]),s._v(" "),t("h3",{attrs:{id:"_3-2-jwt数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-jwt数据结构"}},[s._v("#")]),s._v(" 3.2 JWT数据结构")]),s._v(" "),t("p",[s._v("它是一个很长的字符串，中间用点（"),t("code",[s._v(".")]),s._v("）分隔成三个部分。JWT 的三个部分依次如下：")]),s._v(" "),t("ul",[t("li",[s._v("Header（头部）")]),s._v(" "),t("li",[s._v("Payload（负载）")]),s._v(" "),t("li",[s._v("Signature（签名）")])]),s._v(" "),t("h3",{attrs:{id:"_3-3-jwt与token的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-jwt与token的区别"}},[s._v("#")]),s._v(" 3.3 JWT与Token的区别")]),s._v(" "),t("p",[t("strong",[s._v("相同：")])]),s._v(" "),t("ul",[t("li",[s._v("都是访问资源的令牌")]),s._v(" "),t("li",[s._v("都可以记录用户的信息")]),s._v(" "),t("li",[s._v("都是使服务端无状态化")]),s._v(" "),t("li",[s._v("都是只有验证成功后，客户端才能访问服务端上受保护的资源")])]),s._v(" "),t("p",[t("strong",[s._v("区别：")])]),s._v(" "),t("ul",[t("li",[s._v("Token：服务端验证客户端发送过来的 Token 时，还需要查询数据库获取用户信息，然后验证 Token 是否有效。")]),s._v(" "),t("li",[s._v("JWT： 将 Token 和 Payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验（校验也是 JWT 自己实现的）即可，不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。")])]),s._v(" "),t("h2",{attrs:{id:"_4-http-basic-authentication"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-http-basic-authentication"}},[s._v("#")]),s._v(" 4 Http Basic Authentication")]),s._v(" "),t("p",[s._v("这种方式遵守HTTP协议实现的基本授权方式。HTTP协议定义了通信过程中服务器对客户端的用户身份进行认证的基本方法。其具体流程如下：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("客户端向服务端请求数据，请求的数据包括：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Get /index.html HTTP/1.0 \nHost:www.google.com\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("服务器返回401，提示用户身份尚未被认证")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("HTTP/1.0 401 Unauthorised \nServer: SokEvo/1.0 \nWWW-Authenticate: Basic realm=”google.com” \nContent-Type: text/html \nContent-Length: xxx\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("客户端收到401的返回时，会自动弹出一个登录窗口，要求输入用户名和密码")])]),s._v(" "),t("li",[t("p",[s._v("用户输入用户名和密码后，浏览器会自动对用户名/密码进行加密编码，并将结果放入请求中：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Get /index.html HTTP/1.0 \nHost:www.google.com \nAuthorization: Basic d2FuZzp3YW5n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("服务器收到请求后，会取出"),t("code",[s._v("Authorization")]),s._v("字段的值解密解码，然后将用户名和密码与数据库进行对比验证，通过后则返回客户端请求的资源")])])]),s._v(" "),t("p",[s._v("这种方式的优缺点：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("非常容易实现")]),s._v("，基本所有流行的"),t("strong",[s._v("浏览器都支持")]),s._v("；")]),s._v(" "),t("li",[s._v("但是此认证方式依赖客户端和服务器主机之间的安全连接，否则"),t("strong",[s._v("极易拦截")]),s._v("客户端发送的密钥及服务端返回的信息；")]),s._v(" "),t("li",[s._v("另一个问题是HTTP协议没有提供机制清除浏览器中的认证信息，除非标签页或浏览器关闭、或用户清除历史记录，即"),t("strong",[s._v("服务器无法主动完成用户注销")]),s._v("；")]),s._v(" "),t("li",[s._v("因此此认证方式几乎很少被公开访问的互联网网站使用，一般是用于小型私有系统，如路由器网页管理接口")])]),s._v(" "),t("h2",{attrs:{id:"_5-oauth-open-authorization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-oauth-open-authorization"}},[s._v("#")]),s._v(" 5 OAuth（Open Authorization）")]),s._v(" "),t("p",[s._v("OAuth是一种开放标准的授权机制，即允许用户授权第三方访问服务提供系统中的信息，第三方会显式向用户请求授权，然后生成一个短期令牌，无需提供用户名密码，保护用户数据的隐私。")]),s._v(" "),t("p",[s._v("OAuth协议包含1.0和2.0版本，OAuth2.0授权验证流程更为简单安全，也是目前的主流方式，常见的厂商有支付宝、微信等。")]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://raw.githubusercontent.com/KaiFengGuan/imgs/main/202206081036098.webp"}}),s._v(" "),t("p",[s._v("OAuth具体流程：")]),s._v(" "),t("ul",[t("li",[s._v("第三方显式向用户请求授权")]),s._v(" "),t("li",[s._v("用户授权后，服务器返回一个用户凭证，如授权码")]),s._v(" "),t("li",[s._v("第三方拿这个用户凭证请求服务器授权")]),s._v(" "),t("li",[s._v("服务器校验后，返回资源访问的凭证，即短期令牌")]),s._v(" "),t("li",[s._v("第三方发送凭证向资源服务器请求相关资源")]),s._v(" "),t("li",[s._v("资源服务器验证凭证后，返回请求的资源")])]),s._v(" "),t("p",[s._v("注意，"),t("a",{attrs:{href:"https://juejin.cn/post/6847009773477429255",target:"_blank",rel:"noopener noreferrer"}},[s._v("OAuth提供了四种授权方式"),t("OutboundLink")],1),s._v("，包括授权码（authorization-code）、隐藏式（implicit）、密码式（password）和客户端凭证（client credentials），不管哪种方式，第三方都需要事先向系统注册备案，拿到识别自己身份的客户端ID和客户端密钥。")]),s._v(" "),t("p",[s._v("OAuth提高了用"),t("strong",[s._v("户体验，缩短了用户注册和登录的时间")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"_6-常见问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-常见问题"}},[s._v("#")]),s._v(" 6 常见问题")]),s._v(" "),t("h3",{attrs:{id:"_6-1-使用-cookie-时需要考虑的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-使用-cookie-时需要考虑的问题"}},[s._v("#")]),s._v(" 6.1 使用 cookie 时需要考虑的问题")]),s._v(" "),t("ul",[t("li",[s._v("因为存储在客户端，容易被客户端篡改，使用前需要验证合法性")]),s._v(" "),t("li",[s._v("不要存储敏感数据，比如用户密码，账户余额")]),s._v(" "),t("li",[s._v("使用 httpOnly 在一定程度上提高安全性")]),s._v(" "),t("li",[s._v("尽量减少 cookie 的体积，能存储的数据量不能超过 4kb")]),s._v(" "),t("li",[s._v("设置正确的 domain 和 path，减少数据传输")]),s._v(" "),t("li",[t("strong",[s._v("cookie 无法跨域")])]),s._v(" "),t("li",[s._v("一个浏览器针对一个网站最多存 20 个Cookie，浏览器一般只允许存放 300 个Cookie")]),s._v(" "),t("li",[t("strong",[s._v("移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token")])])]),s._v(" "),t("h3",{attrs:{id:"_6-2-使用-session-时需要考虑的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-使用-session-时需要考虑的问题"}},[s._v("#")]),s._v(" 6.2 使用 session 时需要考虑的问题")]),s._v(" "),t("ul",[t("li",[s._v("将 session 存储在服务器里面，当用户同时在线量比较多时，这些 session 会占据较多的内存，需要在服务端定期的去清理过期的 session")]),s._v(" "),t("li",[s._v("当网站采用"),t("strong",[s._v("集群部署")]),s._v("的时候，会遇到多台 web 服务器之间如何做 session 共享的问题。因为 session 是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建 session 的服务器，那么该服务器就无法拿到之前已经放入到 session 中的登录凭证之类的信息了。")]),s._v(" "),t("li",[s._v("当多个应用要共享 session 时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好 cookie 跨域的处理。")]),s._v(" "),t("li",[t("strong",[s._v("sessionId 是存储在 cookie 中的，假如浏览器禁止 cookie 或不支持 cookie 怎么办？")]),s._v(" 一般会把 sessionId 跟在 url 参数后面即重写 url，所以 session 不一定非得需要靠 cookie 实现")]),s._v(" "),t("li",[t("strong",[s._v("移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token")])])]),s._v(" "),t("h3",{attrs:{id:"_6-3-使用-token-时需要考虑的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-使用-token-时需要考虑的问题"}},[s._v("#")]),s._v(" 6.3 使用 token 时需要考虑的问题")]),s._v(" "),t("ul",[t("li",[s._v("如果你认为用数据库来存储 token 会导致查询时间太长，可以选择放在内存当中。比如 redis 很适合你对 token 查询的需求。")]),s._v(" "),t("li",[t("strong",[s._v("token 完全由应用管理，所以它可以避开同源策略")])]),s._v(" "),t("li",[t("strong",[s._v("token 可以避免 CSRF 攻击（因为不需要 cookie 了）")])]),s._v(" "),t("li",[t("strong",[s._v("移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token")])])]),s._v(" "),t("h3",{attrs:{id:"_6-4-使用-jwt-时需要考虑的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-使用-jwt-时需要考虑的问题"}},[s._v("#")]),s._v(" 6.4 使用 JWT 时需要考虑的问题")]),s._v(" "),t("ul",[t("li",[s._v("因为 JWT 并不依赖 Cookie 的，所以你可以使用任何域名提供你的 API 服务而不需要担心跨域资源共享问题（CORS）")]),s._v(" "),t("li",[s._v("JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。")]),s._v(" "),t("li",[s._v("JWT 不加密的情况下，不能将秘密数据写入 JWT。")]),s._v(" "),t("li",[s._v("JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。")]),s._v(" "),t("li",[s._v("JWT 最大的优势是服务器不再需要存储 Session，使得服务器认证鉴权业务可以方便扩展。但这也是 JWT 最大的缺点：由于服务器不需要存储 Session 状态，因此使用过程中无法废弃某个 Token 或者更改 Token 的权限。也就是说一旦 JWT 签发了，到期之前就会始终有效，除非服务器部署额外的逻辑。")]),s._v(" "),t("li",[s._v("JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。")]),s._v(" "),t("li",[s._v("JWT 适合一次性的命令认证，颁发一个有效期极短的 JWT，即使暴露了危险也很小，由于每次操作都会生成新的 JWT，因此也没必要保存 JWT，真正实现无状态。")]),s._v(" "),t("li",[s._v("为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。")])]),s._v(" "),t("h3",{attrs:{id:"_6-5-使用加密算法时需要考虑的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-使用加密算法时需要考虑的问题"}},[s._v("#")]),s._v(" 6.5 使用加密算法时需要考虑的问题")]),s._v(" "),t("ul",[t("li",[s._v("绝不要以"),t("strong",[s._v("明文存储")]),s._v("密码")]),s._v(" "),t("li",[t("strong",[s._v("永远使用 哈希算法 来处理密码，绝不要使用 Base64 或其他编码方式来存储密码，这和以明文存储密码是一样的，使用哈希，而不要使用编码")]),s._v("。编码以及加密，都是双向的过程，而密码是保密的，应该只被它的所有者知道， 这个过程必须是单向的。哈希正是用于做这个的，从来没有解哈希这种说法，但是编码就存在解码，加密就存在解密。")]),s._v(" "),t("li",[s._v("绝不要使用弱哈希或已被破解的哈希算法，像 MD5 或 SHA1 ，只使用强密码哈希算法。")]),s._v(" "),t("li",[s._v("绝不要以明文形式显示或发送密码，即使是对密码的所有者也应该这样。如果你需要 “忘记密码” 的功能，可以随机生成一个新的 "),t("strong",[s._v("一次性的")]),s._v("（这点很重要）密码，然后把这个密码发送给用户。")])]),s._v(" "),t("h3",{attrs:{id:"_6-6-只要关闭浏览器-session-真的就消失了"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-只要关闭浏览器-session-真的就消失了"}},[s._v("#")]),s._v(" 6.6 只要关闭浏览器 ，session 真的就消失了？")]),s._v(" "),t("ul",[t("li",[s._v("不对。浏览器关闭时，是不会主动去通知服务器的。")]),s._v(" "),t("li",[s._v("之所以会有这种错觉，是大部分 session 机制都使用会话 cookie 来保存 sessionId，而关闭浏览器后这个 cookie 就消失了，再次连接服务器时也就无法找到原来的 session。")]),s._v(" "),t("li",[s._v("如果服务器设置的 cookie 被保存在硬盘上，或者使用某种手段改写浏览器发出的 HTTP 请求头，把原来的 sessionId 发送给服务器，则再次打开浏览器仍然能够打开原来的 session。")]),s._v(" "),t("li",[s._v("恰恰是"),t("strong",[s._v("由于关闭浏览器不会导致 session 被删除，迫使服务器为 session 设置了一个失效时间，当距离客户端上一次使用 session 的时间超过这个失效时间时，服务器就认为客户端已经停止了活动，才会把 session 删除以节省存储空间")]),s._v("。")])]),s._v(" "),t("br"),s._v(" "),t("br"),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考链接")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/huangpb123/article/details/109107461",target:"_blank",rel:"noopener noreferrer"}},[s._v("浏览器Cookie详解"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("JSON Web Token 入门教程"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.cn/post/6844904034181070861",target:"_blank",rel:"noopener noreferrer"}},[s._v("傻傻分不清之 Cookie、Session、Token、JWT"),t("OutboundLink")],1)])])])])}),[],!1,null,null,null);e.default=_.exports}}]);