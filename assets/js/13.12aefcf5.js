(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{589:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("什么是跨域？如何解决跨域资源请求问题？")]),t._v(" "),a("h2",{attrs:{id:"_1-什么是跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是跨域"}},[t._v("#")]),t._v(" 1 什么是跨域？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("广义：一个域下的文档或脚本试图去请求另一个域下的资源")])]),t._v(" "),a("li",[a("p",[t._v("狭义：浏览器同源策略限制的一类请求场景")])])]),t._v(" "),a("h3",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("p",[t._v("同源策略（Same origin policy，SOP）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。")]),t._v(" "),a("p",[t._v('所谓同源是指"'),a("strong",[t._v("协议+域名+端口")]),t._v('"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。')]),t._v(" "),a("p",[t._v("同源策略限制以下几种行为：")]),t._v(" "),a("ul",[a("li",[t._v("Cookie、LocalStorage 和 IndexDB 无法读取")]),t._v(" "),a("li",[t._v("DOM 和 Js对象无法获得")]),t._v(" "),a("li",[t._v("AJAX 请求不能发送")])]),t._v(" "),a("h2",{attrs:{id:"_2-跨域的几种解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-跨域的几种解决方案"}},[t._v("#")]),t._v(" 2 跨域的几种解决方案")]),t._v(" "),a("h3",{attrs:{id:"_2-1-使用jsonp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-使用jsonp"}},[t._v("#")]),t._v(" 2.1 使用jsonp")]),t._v(" "),a("p",[t._v("通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许。")]),t._v(" "),a("p",[t._v("基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" script "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/javascript'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数")]),t._v("\n    script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.domain.com/login?user=admin'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&callback=handleCallback'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回调执行函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("jsonp缺点：")]),t._v(" "),a("ul",[a("li",[t._v("只能实现get一种请求。\n"),a("ul",[a("li",[t._v("因为jsonp是通过动态创建script实现的")]),t._v(" "),a("li",[t._v("动态创建script的时候只能用get")]),t._v(" "),a("li",[t._v("前两句是关键。加一个点助于理解：src中的请求都是get")])])]),t._v(" "),a("li",[t._v("不安全。\n"),a("ul",[a("li",[t._v("假如提供 jsonp 的服务存在页面注入漏洞，所有调用这个 jsonp 的网站都会存在漏洞")]),t._v(" "),a("li",[t._v("必须要保证所使用的 jsonp 服务是安全可信的")])])]),t._v(" "),a("li",[t._v("在调用失败的时候不会返回各种HTTP状态码")]),t._v(" "),a("li",[t._v("只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-使用iframe元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-使用iframe元素"}},[t._v("#")]),t._v(" 2.2 使用"),a("code",[t._v("iframe")]),t._v("元素")]),t._v(" "),a("h4",{attrs:{id:"_1-iframe-document-domain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-iframe-document-domain"}},[t._v("#")]),t._v(" 1. "),a("code",[t._v("iframe")]),t._v(" + "),a("code",[t._v("document.domain")])]),t._v(" "),a("ul",[a("li",[t._v("仅限主域相同，子域不同的跨域应用场景")]),t._v(" "),a("li",[t._v("实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。")]),t._v(" "),a("li",[t._v("如父窗口http://www.domain.com/a.html和子窗口http://www.child.domain.com/b.html都设置"),a("code",[t._v("document.domain = 'domain.com'")])])]),t._v(" "),a("h4",{attrs:{id:"_2-iframe-location-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-iframe-location-hash"}},[t._v("#")]),t._v(" 2. "),a("code",[t._v("iframe")]),t._v(" + "),a("code",[t._v("location.hash")])]),t._v(" "),a("ul",[a("li",[t._v("实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。")]),t._v(" "),a("li",[t._v("具体实现：A域：a.html -> B域：b.html -> A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。")])]),t._v(" "),a("h4",{attrs:{id:"_3-iframe-window-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-iframe-window-name"}},[t._v("#")]),t._v(" 3. "),a("code",[t._v("iframe")]),t._v(" + "),a("code",[t._v("window.name")])]),t._v(" "),a("ul",[a("li",[t._v("window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。")])]),t._v(" "),a("h3",{attrs:{id:"_2-3-postmessage跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-postmessage跨域"}},[t._v("#")]),t._v(" 2.3 "),a("code",[t._v("postMessage")]),t._v("跨域")]),t._v(" "),a("p",[t._v("postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：")]),t._v(" "),a("ul",[a("li",[t._v("页面和其打开的新窗口的数据传递")]),t._v(" "),a("li",[t._v("多窗口之间消息传递")]),t._v(" "),a("li",[t._v("页面与嵌套的iframe消息传递")]),t._v(" "),a("li",[t._v("上面三个场景的跨域数据传递")])]),t._v(" "),a("p",[t._v("用法："),a("code",[t._v("postMessage(data, origin)")]),t._v("方法接受两个参数")]),t._v(" "),a("ul",[a("li",[t._v("data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用"),a("code",[t._v("JSON.stringify()")]),t._v("序列化。")]),t._v(" "),a("li",[t._v('origin： 协议+主机+端口号，也可以设置为"*"，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为"/"。')])]),t._v(" "),a("h3",{attrs:{id:"_2-4-cors跨域资源共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-cors跨域资源共享"}},[t._v("#")]),t._v(" 2.4 CORS跨域资源共享")]),t._v(" "),a("p",[t._v('CORS是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。')]),t._v(" "),a("p",[a("strong",[t._v("整个CORS通信过程，都是浏览器自动完成")]),t._v("，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，"),a("strong",[t._v("实现CORS通信的关键是服务器")]),t._v("。只要服务器实现了CORS接口，就可以跨源通信。")]),t._v(" "),a("h4",{attrs:{id:"两种请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种请求"}},[t._v("#")]),t._v(" 两种请求")]),t._v(" "),a("p",[t._v("浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。")]),t._v(" "),a("p",[t._v("只要同时满足以下两大条件，就属于简单请求：")]),t._v(" "),a("ul",[a("li",[t._v("请求方法是这三个之一：HEAD、GET、POST")]),t._v(" "),a("li",[t._v("HTTP的头信息不超出以下几种字段：\n"),a("ul",[a("li",[t._v("Accept")]),t._v(" "),a("li",[t._v("Accept-Language")]),t._v(" "),a("li",[t._v("Content-Language")]),t._v(" "),a("li",[t._v("Last-Event-ID")]),t._v(" "),a("li",[t._v("Content-Type：只限于三个值"),a("code",[t._v("application/x-www-form-urlencoded")]),t._v("、"),a("code",[t._v("multipart/form-data")]),t._v("、"),a("code",[t._v("text/plain")])])])])]),t._v(" "),a("p",[t._v("凡是不同时满足上面两个条件，就属于非简单请求。")]),t._v(" "),a("h4",{attrs:{id:"_1-简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单请求"}},[t._v("#")]),t._v(" 1. 简单请求")]),t._v(" "),a("p",[t._v("对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个"),a("code",[t._v("Origin")]),t._v("字段，主要用来说明本次请求来自哪个源（协议 + 域名 + 端口），服务器根据这个值，决定是否同意这次请求。")]),t._v(" "),a("p",[t._v("如果"),a("code",[t._v("Origin")]),t._v("指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v("字段（详见下文），就知道出错了，从而抛出一个错误，被"),a("code",[t._v("XMLHttpRequest")]),t._v("的"),a("code",[t._v("onerror")]),t._v("回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。")]),t._v(" "),a("p",[t._v("如果"),a("code",[t._v("Origin")]),t._v("指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。")]),t._v(" "),a("h4",{attrs:{id:"_2-非简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-非简单请求"}},[t._v("#")]),t._v(" 2. 非简单请求")]),t._v(" "),a("p",[a("strong",[t._v("（1）预检请求")])]),t._v(" "),a("p",[t._v("对可能对服务器数据产生副作用的HTTP请求方法，在正式通信之前，浏览器必须先使用"),a("code",[t._v("OPTIONS")]),t._v("方法发起一个预检请求（preflight），从而获知服务器是否允许该跨域请求：如果允许，就发送带数据的真实请求；如果不允许，则阻止发送带数据的真实请求。")]),t._v(" "),a("p",[t._v("预检请求头：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Origin")]),t._v("：表示请求来自哪个源")]),t._v(" "),a("li",[a("code",[t._v("Access-Control-Request-Method")]),t._v("：该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法")]),t._v(" "),a("li",[a("code",[t._v("Access-Control-Request-Headers")]),t._v("：该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段")])]),t._v(" "),a("p",[a("strong",[t._v("（2）预检请求的响应")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("HTTP回应中，关键的是"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v("字段，表示请求所在的域可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。")])]),t._v(" "),a("li",[a("p",[t._v('如果服务器否定了"预检"请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被'),a("code",[t._v("XMLHttpRequest")]),t._v("对象的"),a("code",[t._v("onerror")]),t._v("回调函数捕获。控制台会打印出报错信息。")])])]),t._v(" "),a("p",[a("strong",[t._v("（3）其他响应字段")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Access-Control-Allow-Methods")]),t._v(" "),a("ul",[a("li",[t._v("该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。")]),t._v(" "),a("li",[t._v('注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次"预检"请求。')])])]),t._v(" "),a("li",[a("p",[t._v("Access-Control-Allow-Headers")]),t._v(" "),a("ul",[a("li",[t._v("如果浏览器请求包括"),a("code",[t._v("Access-Control-Request-Headers")]),t._v("字段，则"),a("code",[t._v("Access-Control-Allow-Headers")]),t._v("字段是必需的。")]),t._v(" "),a("li",[t._v('它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在"预检"中请求的字段。')])])]),t._v(" "),a("li",[a("p",[t._v("Access-Control-Allow-Credentials")]),t._v(" "),a("ul",[a("li",[t._v("该字段与简单请求时的含义相同。")])])]),t._v(" "),a("li",[a("p",[t._v("Access-Control-Max-Age")]),t._v(" "),a("ul",[a("li",[t._v("该字段可选，用来指定本次预检请求的有效期，单位为秒。在有效期内，不用发出另一条预检请求。")])])])]),t._v(" "),a("p",[a("strong",[t._v("（4）浏览器的正常请求和响应")])]),t._v(" "),a("p",[t._v('一旦服务器通过了"预检"请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样：')]),t._v(" "),a("ul",[a("li",[t._v("请求头中有一个"),a("code",[t._v("Origin")]),t._v("头信息字段，是浏览器自动添加的")]),t._v(" "),a("li",[t._v("响应头中有一个"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v("头信息字段，是每次回应都必定包含的")])]),t._v(" "),a("h3",{attrs:{id:"_2-5-nginx代理跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-nginx代理跨域"}},[t._v("#")]),t._v(" 2.5 nginx代理跨域")]),t._v(" "),a("h4",{attrs:{id:"_1-nginx配置解决iconfont跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-nginx配置解决iconfont跨域"}},[t._v("#")]),t._v(" 1. nginx配置解决iconfont跨域")]),t._v(" "),a("p",[t._v("浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  add_header Access-Control-Allow-Origin *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"_2-nginx反向代理接口跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-nginx反向代理接口跨域"}},[t._v("#")]),t._v(" 2. nginx反向代理接口跨域")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。")])]),t._v(" "),a("li",[a("p",[t._v("实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。")])])]),t._v(" "),a("h3",{attrs:{id:"_2-6-node-js中间件代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-node-js中间件代理"}},[t._v("#")]),t._v(" 2.6 Node.js中间件代理")]),t._v(" "),a("ul",[a("li",[t._v("node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发")]),t._v(" "),a("li",[t._v("也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。")])]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("参考链接")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000011145364",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端常见跨域解决方案（全）"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("跨域资源共享 CORS 详解"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/b55086cbd9af",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端 | 浅谈preflight request"),a("OutboundLink")],1)])])])])}),[],!1,null,null,null);s.default=e.exports}}]);