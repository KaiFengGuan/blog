(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{583:function(t,a,s){"use strict";s.r(a);var e=s(10),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Cross-site Request Forgery（跨站请求伪造）简称 CSRF，攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。")]),t._v(" "),s("p",[t._v("一个典型的CSRF攻击有着如下的流程：")]),t._v(" "),s("ul",[s("li",[t._v("受害者登录a.com，并保留了登录凭证（Cookie）。")]),t._v(" "),s("li",[t._v("攻击者引诱受害者访问了b.com。")]),t._v(" "),s("li",[t._v("b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。")]),t._v(" "),s("li",[t._v("a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。")]),t._v(" "),s("li",[t._v("a.com以受害者的名义执行了act=xx。")]),t._v(" "),s("li",[t._v("攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。")])]),t._v(" "),s("h2",{attrs:{id:"_1-csrf分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-csrf分类"}},[t._v("#")]),t._v(" 1 CSRF分类")]),t._v(" "),s("h3",{attrs:{id:"_1-1-get类型的csrf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-get类型的csrf"}},[t._v("#")]),t._v(" 1.1 GET类型的CSRF")]),t._v(" "),s("p",[t._v("GET类型的CSRF利用非常简单，只需要一个HTTP请求。")]),t._v(" "),s("p",[t._v("一般这样利用：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v(" <img src=http://bank.example/withdraw?account=xiaoming&amount=10000&for=hacker>\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("在受害者访问含有这个img的页面后，浏览器会自动向"),s("code",[t._v("http://bank.example/withdraw?account=xiaoming&amount=10000&for=hacker")]),t._v("发出一次HTTP请求。bank.example就会收到包含受害者登录信息的一次跨域请求。")]),t._v(" "),s("h3",{attrs:{id:"_1-2-post类型的csrf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-post类型的csrf"}},[t._v("#")]),t._v(" 1.2 POST类型的CSRF")]),t._v(" "),s("p",[t._v("这种类型的CSRF利用起来通常使用的是一个自动提交的表单，如：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("form")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("action")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://bank.example/withdraw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("POST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("account"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xiaoming"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("10000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("for"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hacker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("form")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}},[s("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n    document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("forms"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作。")]),t._v(" "),s("p",[t._v("POST类型的攻击通常比GET要求更加严格一点，但仍并不复杂。任何个人网站、博客，被黑客上传页面的网站都有可能是发起攻击的来源，后端接口不能将安全寄托在仅允许POST上面。")]),t._v(" "),s("h3",{attrs:{id:"_1-3-链接类型的csrf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-链接类型的csrf"}},[t._v("#")]),t._v(" 1.3 链接类型的CSRF")]),t._v(" "),s("p",[t._v("链接类型的CSRF并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发。")]),t._v(" "),s("p",[t._v("这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击，例如：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://test.com/csrf/withdraw.php?amount=1000&for=hacker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("taget")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("_blank"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    重磅消息！！\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("由于之前用户登录了信任的网站A，并且保存登录状态，只要用户主动访问上面的这个PHP页面，则表示攻击成功。")]),t._v(" "),s("h3",{attrs:{id:"_1-4-特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-特点"}},[t._v("#")]),t._v(" 1.4 特点")]),t._v(" "),s("ul",[s("li",[t._v("攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。")]),t._v(" "),s("li",[t._v("攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。")]),t._v(" "),s("li",[t._v("整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“"),s("strong",[t._v("冒用")]),t._v("”。")]),t._v(" "),s("li",[t._v("跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。")])]),t._v(" "),s("p",[t._v("CSRF通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论区，攻击可以直接在本域下进行，而且这种攻击更加危险。")]),t._v(" "),s("h2",{attrs:{id:"_2-csrf防御"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-csrf防御"}},[t._v("#")]),t._v(" 2 CSRF防御")]),t._v(" "),s("p",[t._v("CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性。")]),t._v(" "),s("p",[t._v("上文中讲了CSRF的两个特点：")]),t._v(" "),s("ul",[s("li",[t._v("CSRF（通常）发生在第三方域名。")]),t._v(" "),s("li",[t._v("CSRF攻击者不能获取到Cookie等信息，只是使用。")])]),t._v(" "),s("p",[t._v("针对这两点，我们可以专门制定防护策略，如下：")]),t._v(" "),s("ul",[s("li",[t._v("阻止不明外域的访问\n"),s("ul",[s("li",[t._v("同源检测")]),t._v(" "),s("li",[t._v("Samesite Cookie")])])]),t._v(" "),s("li",[t._v("提交时要求附加本域才能获取的信息\n"),s("ul",[s("li",[t._v("CSRF Token")]),t._v(" "),s("li",[t._v("双重Cookie验证")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-1-同源检测"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-同源检测"}},[t._v("#")]),t._v(" 2.1 同源检测")]),t._v(" "),s("h4",{attrs:{id:"_1-防护策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-防护策略"}},[t._v("#")]),t._v(" （1）防护策略")]),t._v(" "),s("p",[t._v("同源检测是为了禁止外域（或者不受信任的域名）对我们发起请求。")]),t._v(" "),s("p",[t._v("如何判断请求是否来自外域？在HTTP协议中，每一个异步请求都会携带"),s("code",[t._v("Origin")]),t._v("和"),s("code",[t._v("Referer")]),t._v("这两个Header，用于标记来源域名，在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。服务器可以通过解析这两个Header中的域名，确定请求的来源域。")]),t._v(" "),s("ul",[s("li",[t._v("使用Origin Header确定来源域名\n"),s("ul",[s("li",[t._v("如果Origin存在，那么直接使用Origin中的字段确认来源域名就可以。")]),t._v(" "),s("li",[t._v("Origin不存在（两种情况：IE11同源策略、302重定向）")])])]),t._v(" "),s("li",[t._v("使用Referer Header确定来源域名\n"),s("ul",[s("li",[t._v("Referrer Policy规定了"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referrer-Policy",target:"_blank",rel:"noopener noreferrer"}},[t._v("五种Referer策略"),s("OutboundLink")],1),t._v("；")]),t._v(" "),s("li",[t._v("我们可以将Referrer Policy的策略设置成same-origin。同源链接和引用会发送Referer，值为Host不带Path；跨域访问则不携带Referer。")]),t._v(" "),s("li",[t._v("设置Referer Policy的方法：在CSP响应头设置；在meta标签设置；在"),s("code",[t._v("<a>")]),t._v("标签增加referrer属性")])])])]),t._v(" "),s("h4",{attrs:{id:"_2-同源检测缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-同源检测缺陷"}},[t._v("#")]),t._v(" （2）同源检测缺陷")]),t._v(" "),s("ul",[s("li",[t._v("攻击者可以在自己的请求中隐藏Referer；")]),t._v(" "),s("li",[t._v("在下面的情况下Refer没有或者不可信，并且没有使用随机CSRF Token作为第二次检查，建议直接进行阻止\n"),s("ul",[s("li",[t._v("HTTPS页面跳转到HTTP页面，所有浏览器Referer都丢失")]),t._v(" "),s("li",[t._v("点击Flash上到达另外一个网站的时候，Referer的情况就比较杂乱，不太可信")]),t._v(" "),s("li",[t._v("IE6、7下使用"),s("code",[t._v("window.location.href=url")]),t._v("或"),s("code",[t._v("window.open")]),t._v("进行页面跳转，Referer会缺失")])])]),t._v(" "),s("li",[t._v("对于外域发送的请求（如来源是搜索引擎）和来自本域的攻击（如评论、图片等UGC），同源检测仍是无法防范CSRF攻击。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("综上所述："),s("strong",[t._v("同源验证是一个相对简单的防范方法，能够防范绝大多数的CSRF攻击。但这并不是万无一失的，对于安全性要求较高，或者有较多用户输入内容的网站，我们就要对关键的接口做额外的防护措施。")])])]),s("h3",{attrs:{id:"_2-2-csrf-token"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-csrf-token"}},[t._v("#")]),t._v(" 2.2 CSRF Token")]),t._v(" "),s("p",[t._v("前面讲到CSRF的另一个特征是，攻击者无法直接窃取到用户的信息（Cookie，Header，网站内容等），仅仅是冒用Cookie中的信息。而CSRF攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。")]),t._v(" "),s("h4",{attrs:{id:"_1-csrf-token防护步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-csrf-token防护步骤"}},[t._v("#")]),t._v(" （1）CSRF Token防护步骤")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("将CSRF Token输出到页面中")]),t._v(" "),s("ul",[s("li",[t._v("用户打开页面，服务器给用户生成一个Token（一般都包括随机字符串和时间戳的组合），")]),t._v(" "),s("li",[t._v("显然在提交时Token不能再放在Cookie中了，否则又会被攻击者冒用。为了安全起见Token最好还是存在服务器的Session中。")]),t._v(" "),s("li",[t._v("在每次页面加载时，使用JS遍历整个DOM树，对于DOM中所有的a和form标签后加入Token。")]),t._v(" "),s("li",[t._v("对于在页面加载之后动态生成的HTML代码，这种方法就没有作用，还需要程序员在编码时手动添加Token。")])])]),t._v(" "),s("li",[s("strong",[t._v("页面提交的请求携带这个Token")]),t._v(" "),s("ul",[s("li",[t._v("对于GET请求，Token将附在请求地址之后："),s("code",[t._v("http://url?csrftoken=tokenvalue")])]),t._v(" "),s("li",[t._v("对于 POST 请求来说，要在 form 的最后加上"),s("code",[t._v("<input type=”hidden” name=”csrftoken” value=”tokenvalue” />")])])])]),t._v(" "),s("li",[s("strong",[t._v("服务器验证Token是否正确")]),t._v(" "),s("ul",[s("li",[t._v("先解密Token，对比加密字符串以及时间戳，")]),t._v(" "),s("li",[t._v("如果加密字符串一致且时间未过期，那么这个Token就是有效的")]),t._v(" "),s("li",[t._v("如果在请求中找不到Token，或者提供的值与会话中的值不匹配，则应中止请求，重置Token并将事件记录为正在进行的潜在CSRF攻击")])])])]),t._v(" "),s("h4",{attrs:{id:"_2-分布式校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-分布式校验"}},[t._v("#")]),t._v(" （2）分布式校验")]),t._v(" "),s("p",[t._v("在大型网站中，服务器通常不止一台，用户发起的HTTP请求通常要经过像Ngnix之类的负载均衡器之后，再路由到具体的服务器上，由于Session默认存储在单机服务器内存中，Session机制在分布式环境下失效。因此在分布式集群中CSRF Token需要存储在Redis之类的公共存储空间。")]),t._v(" "),s("p",[t._v("由于使用Session存储，读取和验证CSRF Token会引起比较大的复杂度和性能问题，目前很多网站采用Encrypted Token Pattern方式。这种方法的Token是一个计算出来的结果，而非随机生成的字符串。这样在校验时无需再去读取存储的Token，只用再次计算一次即可。")]),t._v(" "),s("ul",[s("li",[t._v("这种Token通常使用UserID、时间戳和随机数，通过加密的方法生成（token一致、不易被破解）")]),t._v(" "),s("li",[t._v("token解密成功之后，服务器可以访问解析值，Token中包含的UserID和时间戳将会被拿来被验证有效性")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("ul",[s("li",[t._v("Token是一个比较有效的CSRF防护方法，只要页面没有XSS漏洞泄露Token，那么接口的CSRF攻击就无法成功。")]),t._v(" "),s("li",[t._v("但实现比较复杂，需要给每一个页面都写入Token（前端无法使用纯静态页面），每一个Form及Ajax请求都携带这个Token，后端对每一个接口都进行校验，并保证页面Token及请求Token一致。")]),t._v(" "),s("li",[t._v("不能在通用的拦截上统一拦截处理，而需要每一个页面和接口都添加对应的输出和校验。")]),t._v(" "),s("li",[t._v("工作量巨大，且有可能遗漏。")])])]),s("h3",{attrs:{id:"_2-3-双重cookie验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-双重cookie验证"}},[t._v("#")]),t._v(" 2.3 双重Cookie验证")]),t._v(" "),s("p",[t._v("利用CSRF攻击不能获取到用户Cookie的特点，我们可以要求Ajax和表单请求携带一个Cookie中的值。")]),t._v(" "),s("h4",{attrs:{id:"_1-防护流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-防护流程"}},[t._v("#")]),t._v(" （1）防护流程")]),t._v(" "),s("ol",[s("li",[t._v("在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串（例如"),s("code",[t._v("csrfcookie=v8g9e4ksfhw")]),t._v("）。")]),t._v(" "),s("li",[t._v("在前端向后端发起请求时，取出Cookie，并添加到URL的参数中（接上例"),s("code",[t._v("POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw")]),t._v("）。")]),t._v(" "),s("li",[t._v("后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。")])]),t._v(" "),s("h4",{attrs:{id:"_2-双重cookie的安全性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-双重cookie的安全性"}},[t._v("#")]),t._v(" （2）双重Cookie的安全性")]),t._v(" "),s("ul",[s("li",[t._v("相对于CSRF Token更简单，可直接通过前后端拦截方法自动化实现；后端校验更方便，只需进行请求中字段的对比，而不需要再进行查询和存储Token。")]),t._v(" "),s("li",[t._v("但在大型网站上的安全性还是没有CSRF Token高\n"),s("ul",[s("li",[t._v("任何跨域都会导致前端无法获取Cookie中的字段（包括子域名之间）")]),t._v(" "),s("li",[t._v("子域可以修改父域的Cookie，如果子域被XSS攻击，修改了父域下的cookie")]),t._v(" "),s("li",[t._v("攻击者可以直接使用自己配置的cookie，对XSS中招的用户再向其父域发起CSRF攻击")])])])]),t._v(" "),s("h4",{attrs:{id:"_3-优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-优缺点"}},[t._v("#")]),t._v(" （3）优缺点")]),t._v(" "),s("p",[s("strong",[t._v("优点：")])]),t._v(" "),s("ul",[s("li",[t._v("无需使用Session，适用面更广，易于实施。")]),t._v(" "),s("li",[t._v("Token储存于客户端中，不会给服务器带来压力。")]),t._v(" "),s("li",[t._v("相对于Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。")])]),t._v(" "),s("p",[s("strong",[t._v("缺点：")])]),t._v(" "),s("ul",[s("li",[t._v("Cookie中增加了额外的字段。")]),t._v(" "),s("li",[t._v("如果有其他漏洞（例如XSS），攻击者可以注入Cookie，那么该防御方式失效。")]),t._v(" "),s("li",[t._v("难以做到子域名的隔离。")]),t._v(" "),s("li",[t._v("为了确保Cookie传输安全，采用这种防御方式的最好确保用整站HTTPS的方式，如果还没切HTTPS的使用这种方式也会有风险。")])]),t._v(" "),s("h3",{attrs:{id:"_2-4-samesite-cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-samesite-cookie"}},[t._v("#")]),t._v(" 2.4 Samesite Cookie")]),t._v(" "),s("blockquote",[s("p",[t._v("为了从源头上解决这个问题，Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie。")])]),t._v(" "),s("h4",{attrs:{id:"_1-属性值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-属性值"}},[t._v("#")]),t._v(" （1）属性值")]),t._v(" "),s("p",[t._v("Samesite 有两个属性值，分别是 Strict 和 Lax")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Samesite-Strict")]),t._v("：严格模式，当前 Cookie 在任何情况下都不可能作为第三方 Cookie，绝无例外。")]),t._v(" "),s("li",[s("code",[t._v("Samesite-Lax")]),t._v("：宽松模式，假如这个"),s("strong",[t._v("请求改变了当前页面")]),t._v("或者"),s("strong",[t._v("打开了新页面")]),t._v("，且同时是个GET请求，则这个Cookie可以作为第三方Cookie。")])]),t._v(" "),s("p",[t._v("一个例子：在b.com设置了如下Cookie")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Set-Cookie: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Samesite")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Strict\nSet-Cookie: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Samesite")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Lax\nSet-Cookie: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("baz")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ul",[s("li",[t._v("在 a.com 下发起对 b.com 的任意请求，foo 这个 Cookie 都不会被包含在 Cookie 请求头中，但 bar 会。")]),t._v(" "),s("li",[t._v("当用户从 a.com 点击链接进入 b.com 时，foo 这个 Cookie 不会被包含在 Cookie 请求头中，但 bar 和 baz 会，也就是说用户在不同网站之间通过链接跳转是不受影响了。")]),t._v(" "),s("li",[t._v("从 a.com 发起的对 b.com 的异步请求，或者页面跳转是通过表单的 post 提交触发的，则bar也不会发送。")])]),t._v(" "),s("h4",{attrs:{id:"_2-如何使用samesite-cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何使用samesite-cookie"}},[t._v("#")]),t._v(" （2）如何使用Samesite Cookie")]),t._v(" "),s("ul",[s("li",[t._v("被设置为Strict，在任何跨域请求中都不会携带Cookie，所以说CSRF攻击基本没有机会；但对于用户来讲，可能体验不会很好；")]),t._v(" "),s("li",[t._v("被设置为Lax，那么其他网站通过页面跳转过来的时候可以使用Cookie，可以保障外域连接打开页面时用户的登录状态。但相应的，其安全性也比较低。")]),t._v(" "),s("li",[t._v("兼容性不是很好")]),t._v(" "),s("li",[t._v("不支持子域。如种在topic.a.com下的Cookie，并不能使用a.com下种植的SamesiteCookie。")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("SameSite 与 CORS 的区别")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("SameSite是限制Cookie的发送，限制的是页面域名与domain")]),t._v(" "),s("li",[t._v("CORS是限制对资源的读写（HTTP请求），限制的是页面域名与资源域名")])])]),t._v(" "),s("h3",{attrs:{id:"_2-5-其他防范手段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-其他防范手段"}},[t._v("#")]),t._v(" 2.5 其他防范手段")]),t._v(" "),s("h4",{attrs:{id:"_1-防止网站被利用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-防止网站被利用"}},[t._v("#")]),t._v(" （1）防止网站被利用")]),t._v(" "),s("p",[t._v("面所说的，都是被攻击的网站如何做好防护。而非防止攻击的发生，CSRF的攻击可以来自：")]),t._v(" "),s("ul",[s("li",[t._v("攻击者自己的网站。")]),t._v(" "),s("li",[t._v("有文件上传漏洞的网站。")]),t._v(" "),s("li",[t._v("第三方论坛等用户内容。")]),t._v(" "),s("li",[t._v("被攻击网站自己的评论功能等。")])]),t._v(" "),s("p",[t._v("对于来自黑客自己的网站，我们无法防护。但对其他情况，那么如何防止自己的网站被利用成为攻击的源头呢？")]),t._v(" "),s("ul",[s("li",[t._v("严格管理所有的上传接口，防止任何预期之外的上传内容（例如HTML）。")]),t._v(" "),s("li",[t._v("添加Header "),s("code",[t._v("X-Content-Type-Options: nosniff")]),t._v(" 防止黑客上传HTML内容的资源（例如图片）被解析为网页。")]),t._v(" "),s("li",[t._v("对于用户上传的图片，进行转存或者校验。不要直接使用用户填写的图片链接。")]),t._v(" "),s("li",[t._v("当前用户打开其他用户填写的链接时，需告知风险（这也是很多论坛不允许直接在内容中发布外域链接的原因之一，不仅仅是为了用户留存，也有安全考虑）。")])]),t._v(" "),s("h4",{attrs:{id:"_2-csrf测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-csrf测试"}},[t._v("#")]),t._v(" （2）CSRF测试")]),t._v(" "),s("p",[t._v("CSRFTester工具的测试原理：使用代理抓取我们在浏览器中访问过的所有的连接以及所有的表单等信息，通过在CSRFTester中修改相应的表单等信息，重新提交，相当于一次伪造客户端请求，如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。")]),t._v(" "),s("ol",[s("li",[t._v("设置浏览器代理")]),t._v(" "),s("li",[t._v("使用合法账户访问网站开始测试")]),t._v(" "),s("li",[t._v("通过CSRF修改并伪造请求")]),t._v(" "),s("li",[t._v("拿到结果如有漏洞进行修复")])]),t._v(" "),s("h4",{attrs:{id:"_3-csrf监控"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-csrf监控"}},[t._v("#")]),t._v(" （3）CSRF监控")]),t._v(" "),s("p",[t._v("CSRF攻击有着比较明显的特征：")]),t._v(" "),s("ul",[s("li",[t._v("跨域请求。")]),t._v(" "),s("li",[t._v("GET类型请求Header的MIME类型大概率为图片，而实际返回Header的MIME类型为Text、JSON、HTML。")])]),t._v(" "),s("p",[t._v("我们可以在网站的代理层监控所有的接口请求，如果请求符合上面的特征，就可以认为请求有CSRF攻击嫌疑。我们可以提醒对应的页面和项目负责人，检查或者 Review其CSRF防护策略。")]),t._v(" "),s("h4",{attrs:{id:"_4-个人用户csrf防护"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-个人用户csrf防护"}},[t._v("#")]),t._v(" （4）个人用户CSRF防护")]),t._v(" "),s("ul",[s("li",[t._v("使用网页版邮件的浏览邮件或者新闻也会带来额外的风险，因为查看邮件或者新闻消息有可能导致恶意代码的攻击。")]),t._v(" "),s("li",[t._v("尽量不要打开可疑的链接，一定要打开时，使用不常用的浏览器。")])]),t._v(" "),s("h2",{attrs:{id:"_3-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-总结"}},[t._v("#")]),t._v(" 3 总结")]),t._v(" "),s("p",[t._v("简单总结一下上文的防护策略：")]),t._v(" "),s("ul",[s("li",[t._v("CSRF自动防御策略：同源检测（Origin 和 Referer 验证）。")]),t._v(" "),s("li",[t._v("CSRF主动防御措施：Token验证 或者 双重Cookie验证 以及配合Samesite Cookie。")]),t._v(" "),s("li",[t._v("保证页面的幂等性，后端接口不要在GET页面中做用户操作。")])]),t._v(" "),s("p",[t._v("为了更好的防御CSRF，最佳实践应该是结合上面总结的防御措施方式中的优缺点来综合考虑，结合当前Web应用程序自身的情况做合适的选择，才能更好的预防CSRF的发生。")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://tech.meituan.com/2018/10/11/fe-security-csrf.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端安全系列（二）：如何防止CSRF攻击？"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://forum.juejin.cn/youthcamp/post/7058909289787686926",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web开发的安全之旅"),s("OutboundLink")],1)])])])])}),[],!1,null,null,null);a.default=n.exports}}]);